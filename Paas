pip install paho-mqtt
# Step 2: Set Up Your Working folder named
Practical
in cmd change directory where folder created (cd Practical)


----Create two files in ide publisher.py subscriber.py-----
-------------# Step 3: Write the Code for Publisher (publisher.py)---------------
import paho.mqtt.client as mqtt
import json
import time
import random

# Free Cloud MQTT Broker (HiveMQ)
MQTT_BROKER = "broker.hivemq.com"
MQTT_PORT = 1883
MQTT_TOPIC = "iot/mobile/sensor"

# Function to simulate sensor data
def get_sensor_data():
    return {
        "device_id": "mobile_001",
        "timestamp": time.time(),
        "gps": {
            "latitude": round(random.uniform(-90.0, 90.0), 6),
            "longitude": round(random.uniform(-180.0, 180.0), 6)
        },
        "temperature": round(random.uniform(20.0, 40.0), 2)
    }

# Setup MQTT client
client = mqtt.Client()

# Connect to the MQTT broker
client.connect(MQTT_BROKER, MQTT_PORT, 60)

# Keep the connection alive
client.loop_start()

try:
    while True:
        data = get_sensor_data()
        payload = json.dumps(data)
        result = client.publish(MQTT_TOPIC, payload)
        
        # Print only if publish was successful
        if result.rc == mqtt.MQTT_ERR_SUCCESS:
            print(f"Published: {payload}")
        else:
            print("Failed to publish message")
        
        time.sleep(5)  # Send message every 5 seconds

except KeyboardInterrupt:
    print("Stopping Publisher")
    client.loop_stop()
    client.disconnect()

    
------# Step 4: Write the Code for Subscriber (subscriber.py)----------
import paho.mqtt.client as mqtt

# Free Cloud MQTT Broker
MQTT_BROKER = "broker.hivemq.com"
MQTT_PORT = 1883
MQTT_TOPIC = "iot/mobile/sensor"

# Callback function when a connection is established
def on_connect(client, userdata, flags, rc):
    if rc == 0:
        print("Connected to MQTT Broker!")
        client.subscribe(MQTT_TOPIC)  # Subscribe after connection
    else:
        print(f"Connection failed with code {rc}")

# Callback function when a message is received
def on_message(client, userdata, msg):
    print(f"Received: {msg.payload.decode()}")

# Setup MQTT Client
client = mqtt.Client()

client.on_connect = on_connect  # Attach connection callback
client.on_message = on_message  # Attach message received callback

# Connect to the MQTT broker
client.connect(MQTT_BROKER, MQTT_PORT, 60)

print("Waiting for messages...")
client.loop_forever()  # Keep the subscriber running
-------------------------------

# Running the publisher.py
cd path where the folder is
python publisher.py

in another cmd

# Running the Subscriber
cd path where the folder is
python subscriber.py

